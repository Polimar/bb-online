<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🧠 BrainBrawler - Game</title>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
            overflow: hidden;
        }

        /* Game Container */
        .game-container {
            height: 100vh;
            display: flex;
            flex-direction: column;
            position: relative;
        }

        /* Top Ad Banner for FREE users */
        .top-ad-banner {
            background: #fff;
            border-bottom: 2px solid #e1e5e9;
            padding: 10px;
            text-align: center;
            display: none;
            min-height: 60px;
            align-items: center;
            justify-content: center;
        }

        .top-ad-banner.show {
            display: flex;
        }

        .ad-placeholder {
            background: linear-gradient(45deg, #f8f9fa, #e9ecef);
            border: 2px dashed #adb5bd;
            border-radius: 8px;
            padding: 15px;
            color: #6c757d;
            font-size: 0.9rem;
            width: 100%;
            max-width: 728px;
            height: 90px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Game Header */
        .game-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }

        .game-info {
            display: flex;
            align-items: center;
            gap: 30px;
        }

        .question-counter {
            font-size: 1.2rem;
            font-weight: 600;
            color: #667eea;
        }

        .timer {
            background: linear-gradient(45deg, #ff6b6b, #ff8e53);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            font-size: 1.4rem;
            font-weight: 700;
            min-width: 80px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
        }

        .timer.warning {
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .score-display {
            font-size: 1.2rem;
            font-weight: 600;
            color: #28a745;
        }

        /* Main Game Area */
        .game-main {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 40px 20px;
            position: relative;
        }

        .question-container {
            max-width: 900px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 25px;
            padding: 50px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
            text-align: center;
        }

        .question-number {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 8px 20px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 600;
            display: inline-block;
            margin-bottom: 30px;
        }

        .question-text {
            font-size: 2rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 40px;
            line-height: 1.4;
        }

        .answers-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .answer-option {
            background: white;
            border: 3px solid #e1e5e9;
            border-radius: 15px;
            padding: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1.1rem;
            font-weight: 600;
            text-align: left;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .answer-option:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
        }

        .answer-option.selected {
            border-color: #667eea;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .answer-option.correct {
            border-color: #28a745;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
        }

        .answer-option.incorrect {
            border-color: #dc3545;
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
        }

        .answer-option.disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

        .answer-letter {
            background: rgba(255, 255, 255, 0.2);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 1.2rem;
        }

        .answer-option:not(.selected) .answer-letter {
            background: #667eea;
            color: white;
        }

        /* Bottom Ad Banner for FREE users */
        .bottom-ad-banner {
            background: #fff;
            border-top: 2px solid #e1e5e9;
            padding: 10px;
            text-align: center;
            display: none;
            min-height: 60px;
            align-items: center;
            justify-content: center;
        }

        .bottom-ad-banner.show {
            display: flex;
        }

        /* Results Screen */
        .results-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .results-screen.show {
            display: flex;
        }

        .results-container {
            background: white;
            border-radius: 25px;
            padding: 50px;
            text-align: center;
            max-width: 600px;
            width: 90%;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
        }

        .results-title {
            font-size: 2.5rem;
            font-weight: 800;
            color: #667eea;
            margin-bottom: 30px;
        }

        .final-score {
            font-size: 3rem;
            font-weight: 800;
            color: #28a745;
            margin-bottom: 20px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 30px 0;
        }

        .stat-item {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
        }

        .stat-value {
            font-size: 1.8rem;
            font-weight: 700;
            color: #667eea;
        }

        .stat-label {
            color: #666;
            margin-top: 5px;
        }

        /* Interstitial Ad for FREE users */
        .interstitial-ad {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }

        .interstitial-ad.show {
            display: flex;
        }

        .interstitial-content {
            background: white;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            max-width: 500px;
            width: 90%;
        }

        .interstitial-countdown {
            font-size: 1.2rem;
            color: #667eea;
            margin-bottom: 20px;
            font-weight: 600;
        }

        /* Buttons */
        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 25px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 10px;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        /* Loading State */
        .loading {
            display: none;
            text-align: center;
            padding: 50px;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Premium Notice */
        .premium-notice {
            background: linear-gradient(45deg, #28a745, #20c997);
            color: white;
            padding: 10px 20px;
            text-align: center;
            font-weight: 600;
            display: none;
        }

        .premium-notice.show {
            display: block;
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .game-header {
                padding: 15px;
            }

            .game-info {
                gap: 15px;
            }

            .question-container {
                padding: 30px 20px;
                margin: 0 10px;
            }

            .question-text {
                font-size: 1.4rem;
            }

            .answers-grid {
                grid-template-columns: 1fr;
                gap: 15px;
            }

            .answer-option {
                padding: 20px 15px;
            }

            .results-container {
                padding: 30px 20px;
                margin: 0 10px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Premium Notice -->
    <div class="premium-notice" id="premiumNotice">
        ⭐ Premium Experience - Ad-Free Gaming
    </div>

    <!-- Top Ad Banner (FREE users only) -->
    <div class="top-ad-banner" id="topAdBanner">
        <div class="ad-placeholder">
            📱 Advertisement Space - 728x90 Banner
            <br><small>Ads help keep BrainBrawler free for everyone</small>
        </div>
    </div>

    <div class="game-container">
        <!-- Game Header -->
        <div class="game-header">
            <div class="game-info">
                <div class="question-counter" id="questionCounter">Question 1 of 10</div>
                <div class="timer" id="timer">10</div>
            </div>
            <div class="score-display" id="scoreDisplay">Score: 0</div>
        </div>

        <!-- Main Game Area -->
        <div class="game-main" id="gameMain">
            <!-- Loading State -->
            <div class="loading" id="loadingState">
                <div class="spinner"></div>
                <h3>Loading Game...</h3>
                <p>Preparing your quiz questions</p>
            </div>

            <!-- Question Container -->
            <div class="question-container" id="questionContainer" style="display: none;">
                <div class="question-number" id="questionNumber">Question 1</div>
                <div class="question-text" id="questionText">Loading question...</div>
                
                <div class="answers-grid" id="answersGrid">
                    <div class="answer-option" data-answer="0">
                        <div class="answer-letter">A</div>
                        <div class="answer-text">Option A</div>
                    </div>
                    <div class="answer-option" data-answer="1">
                        <div class="answer-letter">B</div>
                        <div class="answer-text">Option B</div>
                    </div>
                    <div class="answer-option" data-answer="2">
                        <div class="answer-letter">C</div>
                        <div class="answer-text">Option C</div>
                    </div>
                    <div class="answer-option" data-answer="3">
                        <div class="answer-letter">D</div>
                        <div class="answer-text">Option D</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bottom Ad Banner (FREE users only) -->
        <div class="bottom-ad-banner" id="bottomAdBanner">
            <div class="ad-placeholder">
                📱 Advertisement Space - 320x50 Banner
            </div>
        </div>
    </div>

    <!-- Interstitial Ad (FREE users only) -->
    <div class="interstitial-ad" id="interstitialAd">
        <div class="interstitial-content">
            <div class="interstitial-countdown" id="interstitialCountdown">
                Advertisement - 3 seconds remaining
            </div>
            <div class="ad-placeholder" style="height: 250px;">
                📱 Full-Screen Advertisement
                <br><br>
                <small>This ad will close automatically</small>
            </div>
        </div>
    </div>

    <!-- Results Screen -->
    <div class="results-screen" id="resultsScreen">
        <div class="results-container">
            <div class="results-title">🎉 Game Complete!</div>
            <div class="final-score" id="finalScore">0</div>
            
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value" id="correctAnswers">0</div>
                    <div class="stat-label">Correct Answers</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="accuracy">0%</div>
                    <div class="stat-label">Accuracy</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="avgTime">0s</div>
                    <div class="stat-label">Avg. Response Time</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="rank">#1</div>
                    <div class="stat-label">Final Rank</div>
                </div>
            </div>

            <div style="margin-top: 30px;">
                <a href="lobby.html" class="btn btn-primary">Play Again</a>
                <a href="lobby.html" class="btn btn-secondary">Back to Lobby</a>
            </div>
        </div>
    </div>

    <!-- Socket.io client library -->
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    
    <script>
        // Game state
        let gameState = {
            roomId: null,
            roomCode: null,
            questions: [],
            currentQuestion: 0,
            totalQuestions: 0,
            questionTime: 15,
            score: 0,
            correctAnswers: 0,
            players: [],
            answers: [],
            responseTimes: [],
            gameData: null,
            socket: null,
            connected: false,
            questionStartTime: null,
            selectedAnswer: null
        };

        const API_BASE = `http://${window.location.hostname}:3000`;
        let currentUser = null;

        // Initialize game when page loads
        document.addEventListener('DOMContentLoaded', async () => {
            await initializeGame();
        });

        async function initializeGame() {
            try {
                // Get current user
                currentUser = JSON.parse(localStorage.getItem('brainbrawler_user') || '{}');
                if (!currentUser.id) {
                    console.error('No user found, redirecting to login');
                    window.location.href = 'index.html';
                    return;
                }

                // Get room data from URL parameters
                const urlParams = new URLSearchParams(window.location.search);
                gameState.roomId = urlParams.get('roomId');
                gameState.roomCode = urlParams.get('roomCode');

                console.log('URL Parameters:', {
                    roomId: gameState.roomId,
                    roomCode: gameState.roomCode,
                    urlSearch: window.location.search
                });

                if (!gameState.roomId) {
                    console.error('No room ID specified, redirecting to lobby');
                    window.location.href = 'lobby.html';
                    return;
                }

                // Always ensure roomCode is based on roomId for consistency
                gameState.roomCode = `R${gameState.roomId}`;
                console.log('🔑 Enforced roomCode consistency:', gameState.roomCode, 'for roomId:', gameState.roomId);

                console.log('Initializing game for room:', gameState.roomId, 'code:', gameState.roomCode);

                // Get game data from localStorage (set by waiting room)
                const savedGameData = localStorage.getItem('brainbrawler_game_data');
                if (savedGameData) {
                    try {
                        gameState.gameData = JSON.parse(savedGameData);
                        gameState.totalQuestions = gameState.gameData.totalQuestions || 10;
                        gameState.questionTime = gameState.gameData.questionTime || 15;
                        
                        // Clear the saved data
                        localStorage.removeItem('brainbrawler_game_data');
                        
                        console.log('Game data loaded from localStorage:', gameState.gameData);
                    } catch (parseError) {
                        console.warn('Failed to parse saved game data, using defaults:', parseError);
                        gameState.totalQuestions = 10;
                        gameState.questionTime = 15;
                    }
                } else {
                    console.warn('No saved game data found, using defaults');
                    gameState.totalQuestions = 10;
                    gameState.questionTime = 15;
                }

                // Set up account type specific experience
                try {
                    if (currentUser.accountType === 'PREMIUM' || currentUser.accountType === 'ADMIN') {
                        showPremiumExperience();
                    } else {
                        showFreeExperience();
                    }
                } catch (uiError) {
                    console.warn('Error setting up UI experience:', uiError);
                }

                // Connect to Socket.io for Kafka integration
                try {
                    await connectToGame();
                    console.log('Successfully connected to game server');
                } catch (connectionError) {
                    console.error('Failed to connect to game server:', connectionError);
                    // Don't fail completely, allow offline mode
                }

                // Initialize UI
                try {
                    updateGameHeader();
                    showWaitingMessage();
                } catch (uiError) {
                    console.error('Error initializing UI:', uiError);
                }

                console.log('Game initialization completed successfully');
                
            } catch (error) {
                console.error('Game initialization error:', error);
                
                // Show more specific error message
                const errorMsg = error.message || 'Unknown initialization error';
                alert(`Failed to initialize game: ${errorMsg}`);
                
                // Redirect after a delay to allow user to see the error
                setTimeout(() => {
                    window.location.href = 'lobby.html';
                }, 3000);
            }
        }

        async function connectToGame() {
            try {
                const token = localStorage.getItem('brainbrawler_token');
                
                console.log('🔗 Attempting Socket.io connection:', {
                    API_BASE: API_BASE,
                    hasToken: !!token,
                    tokenLength: token ? token.length : 0
                });
                
                // Connect to Socket.io for real-time Kafka messages
                gameState.socket = io(API_BASE, {
                    auth: { token: token },
                    transports: ['websocket', 'polling']
                });
                
                console.log('🔌 Socket.io object created:', !!gameState.socket);

                gameState.socket.on('connect', () => {
                    console.log('✅ Connected to game server');
                    gameState.connected = true;
                    
                    console.log('🔗 Joining game room with data:', {
                        roomId: gameState.roomId,
                        roomCode: gameState.roomCode
                    });
                    
                    // Join the game room using roomCode for Socket.io room
                    gameState.socket.emit('join-game-room', {
                        roomId: gameState.roomId,
                        roomCode: gameState.roomCode
                    });
                });

                gameState.socket.on('disconnect', () => {
                    console.log('⚠️ Disconnected from game server');
                    gameState.connected = false;
                });

                gameState.socket.on('joined-game-room', (data) => {
                    console.log('✅ Successfully joined game room:', data);
                });

                gameState.socket.on('player-joined-game', (data) => {
                    console.log('👤 Player joined game:', data);
                });

                // Game events from GameEngine
                gameState.socket.on('game-started', (data) => {
                    console.log('🎮 Game started:', data);
                    // Game has started, wait for first question
                    showWaitingMessage('Game started! First question coming...');
                });

                gameState.socket.on('game-question', (data) => {
                    console.log('📝 New question received:', data);
                    console.log('🚀 About to call handleNewQuestion...');
                    try {
                        handleNewQuestion(data);
                        console.log('✅ handleNewQuestion completed successfully');
                    } catch (error) {
                        console.error('💥 Error calling handleNewQuestion:', error);
                        console.error('💥 Error stack:', error.stack);
                    }
                });

                gameState.socket.on('question-results', (data) => {
                    console.log('📊 Question results:', data);
                    handleQuestionResults(data);
                });

                gameState.socket.on('game-ended', (data) => {
                    console.log('🏁 Game ended:', data);
                    handleGameEnd(data);
                });

                gameState.socket.on('player-answered', (data) => {
                    console.log('👤 Player answered:', data);
                    updatePlayerStatus(data);
                });

                gameState.socket.on('connect_error', (error) => {
                    console.error('❌ Socket.io connection error:', error);
                    showError('Failed to connect to game server: ' + error.message);
                });

                gameState.socket.on('error', (error) => {
                    console.error('❌ Game error:', error);
                    showError(error.message);
                });

            } catch (error) {
                console.error('Connection error:', error);
                showError('Failed to connect to game server');
            }
        }

        // Timer
        let timerInterval = null;
        let timeLeft = 10;

        // Initialize game
        window.addEventListener('load', async () => {
            await loadUser();
            await initializeGame();
        });

        // Load user data
        async function loadUser() {
            const storedUser = localStorage.getItem('brainbrawler_user');
            const token = localStorage.getItem('brainbrawler_token');

            if (!storedUser || !token) {
                window.location.href = 'index.html';
                return;
            }

            currentUser = JSON.parse(storedUser);
            
            // Show appropriate UI based on account type
            if (currentUser.accountType === 'PREMIUM' || currentUser.accountType === 'ADMIN') {
                showPremiumExperience();
            } else {
                showFreeExperience();
            }
        }

        // Show premium experience (ad-free)
        function showPremiumExperience() {
            document.getElementById('premiumNotice').classList.add('show');
            // Hide all ad elements
            const adElements = ['topAdBanner', 'bottomAdBanner'];
            adElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.classList.remove('show');
                }
            });
        }

        // Show free experience (with ads)
        function showFreeExperience() {
            // Show ad banners
            const adElements = ['topAdBanner', 'bottomAdBanner'];
            adElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.classList.add('show');
                }
            });
        }

        // Handle new question from GameEngine
        function handleNewQuestion(data) {
            console.log('🎯 ENTERING handleNewQuestion with data:', data);
            try {
                console.log('🎯 Inside try block - Received question:', data);
                
                // Update game state
                gameState.currentQuestion = data.questionNumber - 1; // 0-based index
                gameState.totalQuestions = data.totalQuestions;
                gameState.questionTime = data.timeLimit;
                
                // Initialize questions array if not exists
                if (!gameState.questions) {
                    gameState.questions = [];
                    console.log('📝 Initialized questions array');
                }
                
                // Store the question
                gameState.questions[gameState.currentQuestion] = data.question;
                console.log('💾 Question stored in gameState:', gameState.questions[gameState.currentQuestion]);
                
                // Check elements exist
                const loadingState = document.getElementById('loadingState');
                const questionContainer = document.getElementById('questionContainer');
                
                console.log('🔍 DOM Elements:', {
                    loadingState: loadingState ? 'found' : 'NOT FOUND',
                    questionContainer: questionContainer ? 'found' : 'NOT FOUND'
                });
                
                // Hide loading, show game
                if (loadingState) {
                    loadingState.style.display = 'none';
                    console.log('✅ Loading state hidden');
                } else {
                    console.error('❌ Loading state element not found!');
                }
                
                if (questionContainer) {
                    questionContainer.style.display = 'block';
                    questionContainer.style.visibility = 'visible';
                    questionContainer.style.opacity = '1';
                    console.log('✅ Question container shown with CSS:', questionContainer.style.cssText);
                } else {
                    console.error('❌ Question container element not found!');
                }
                
                // Show the question
                showLiveQuestion(data);
                
            } catch (error) {
                console.error('🚨 Error in handleNewQuestion:', error);
                console.error('🚨 Error stack:', error.stack);
                alert('Error displaying question: ' + error.message);
            }
        }

        // Show question from live game
        function showLiveQuestion(questionData) {
            console.log('📝 Showing live question:', questionData);
            const question = questionData.question;
            
            // Check question data
            console.log('📄 Question data:', {
                text: question.text,
                options: question.options,
                hasText: !!question.text,
                hasOptions: !!question.options
            });
            
            // Update UI
            const questionCounter = document.getElementById('questionCounter');
            const questionNumber = document.getElementById('questionNumber');
            const questionText = document.getElementById('questionText');
            
            console.log('🔍 Question UI Elements:', {
                questionCounter: questionCounter ? 'found' : 'NOT FOUND',
                questionNumber: questionNumber ? 'found' : 'NOT FOUND',
                questionText: questionText ? 'found' : 'NOT FOUND'
            });
            
            if (questionCounter) {
                questionCounter.textContent = `Question ${questionData.questionNumber} of ${questionData.totalQuestions}`;
                console.log('✅ Question counter updated');
            }
            
            if (questionNumber) {
                questionNumber.textContent = `Question ${questionData.questionNumber}`;
                console.log('✅ Question number updated');
            }
            
            if (questionText) {
                questionText.textContent = question.text;
                questionText.style.visibility = 'visible';
                questionText.style.opacity = '1';
                console.log('✅ Question text updated:', question.text);
                console.log('📋 Question text element CSS:', questionText.style.cssText);
            }
            
            // Update answer options
            const answerOptions = document.querySelectorAll('.answer-option');
            console.log('🔍 Answer options:', {
                found: answerOptions.length,
                expected: 4
            });
            
            answerOptions.forEach((option, index) => {
                const textElement = option.querySelector('.answer-text');
                console.log(`🔍 Option ${index}:`, {
                    option: option ? 'found' : 'NOT FOUND',
                    textElement: textElement ? 'found' : 'NOT FOUND',
                    questionOption: question.options[index] || 'NOT FOUND'
                });
                
                if (textElement && question.options[index]) {
                    textElement.textContent = question.options[index];
                    textElement.style.visibility = 'visible';
                    textElement.style.opacity = '1';
                    option.style.visibility = 'visible';
                    option.style.opacity = '1';
                    console.log(`✅ Option ${index} updated:`, question.options[index]);
                    
                    // Reset styles
                    option.className = 'answer-option';
                    option.onclick = () => selectAnswer(index);
                } else {
                    console.error(`❌ Failed to update option ${index}`);
                }
            });
            
            // Start timer
            timeLeft = questionData.timeLimit;
            startTimerWithLimit(questionData.timeLimit);
            gameState.questionStartTime = Date.now();
            gameState.selectedAnswer = null;
        }

        // Start game (legacy function - now handled by GameEngine)
        function startGame() {
            gameState.startTime = Date.now();
            gameState.currentQuestion = 0;
            
            // Hide loading, show game
            document.getElementById('loadingState').style.display = 'none';
            document.getElementById('questionContainer').style.display = 'block';
            
            // Wait for questions from GameEngine
            showWaitingMessage('Waiting for first question...');
        }

        // Show waiting message
        function showWaitingMessage(message = 'Waiting for game to start...') {
            const loadingState = document.getElementById('loadingState');
            const questionContainer = document.getElementById('questionContainer');
            
            if (loadingState) {
                loadingState.style.display = 'block';
                const messageEl = loadingState.querySelector('p');
                if (messageEl) {
                    messageEl.textContent = message;
                }
            }
            
            if (questionContainer) {
                questionContainer.style.display = 'none';
            }
        }

        // Show current question (legacy function)
        function showQuestion() {
            if (!gameState.questions || !gameState.questions[gameState.currentQuestion]) {
                showWaitingMessage('No questions available');
                return;
            }
            
            const question = gameState.questions[gameState.currentQuestion];
            
            // Update UI
            document.getElementById('questionCounter').textContent = 
                `Question ${gameState.currentQuestion + 1} of ${gameState.questions.length}`;
            document.getElementById('questionNumber').textContent = 
                `Question ${gameState.currentQuestion + 1}`;
            document.getElementById('questionText').textContent = question.text;
            
            // Update answer options
            const answerOptions = document.querySelectorAll('.answer-option');
            answerOptions.forEach((option, index) => {
                const textElement = option.querySelector('.answer-text');
                if (textElement && question.options && question.options[index]) {
                    textElement.textContent = question.options[index];
                    
                    // Reset styles
                    option.className = 'answer-option';
                    option.onclick = () => selectAnswer(index);
                }
            });
            
            // Start timer
            startTimer();
            gameState.questionStartTime = Date.now();
            gameState.selectedAnswer = null;
        }

        // Start timer
        function startTimer() {
            timeLeft = 10; // 10 seconds per question as per UX spec
            updateTimerDisplay();
            
            timerInterval = setInterval(() => {
                timeLeft--;
                updateTimerDisplay();
                
                if (timeLeft <= 3) {
                    document.getElementById('timer').classList.add('warning');
                }
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    timeUp();
                }
            }, 1000);
        }

        // Start timer with specific time limit
        function startTimerWithLimit(timeLimit) {
            timeLeft = timeLimit;
            updateTimerDisplay();
            
            if (timerInterval) {
                clearInterval(timerInterval);
            }
            
            timerInterval = setInterval(() => {
                timeLeft--;
                updateTimerDisplay();
                
                if (timeLeft <= 3) {
                    const timerEl = document.getElementById('timer');
                    if (timerEl) timerEl.classList.add('warning');
                }
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    timeUp();
                }
            }, 1000);
        }

        // Update timer display
        function updateTimerDisplay() {
            document.getElementById('timer').textContent = timeLeft;
        }

        // Select answer
        function selectAnswer(answerIndex) {
            if (gameState.selectedAnswer !== null) return; // Already answered
            
            gameState.selectedAnswer = answerIndex;
            const responseTime = Date.now() - gameState.questionStartTime;
            gameState.responseTimes.push(responseTime);
            
            // Clear timer
            clearInterval(timerInterval);
            document.getElementById('timer').classList.remove('warning');
            
            // Show correct/incorrect
            showAnswerResult(answerIndex);
            
            // Calculate score
            const question = gameState.questions[gameState.currentQuestion];
            if (answerIndex === question.correctAnswer) {
                gameState.correctAnswers++;
                // Score based on speed (more points for faster answers)
                const speedBonus = Math.max(0, timeLeft * 10);
                gameState.score += 100 + speedBonus;
            }
            
            updateScoreDisplay();
            
            // Move to next question after delay
            setTimeout(() => {
                nextQuestion();
            }, 2000);
        }

        // Time up
        function timeUp() {
            if (gameState.selectedAnswer !== null) return; // Already answered
            
            gameState.selectedAnswer = -1; // No answer
            gameState.responseTimes.push(10000); // Max time
            
            // Show correct answer
            showAnswerResult(-1);
            
            // Move to next question after delay
            setTimeout(() => {
                nextQuestion();
            }, 2000);
        }

        // Show answer result
        function showAnswerResult(selectedIndex) {
            const question = gameState.questions[gameState.currentQuestion];
            const answerOptions = document.querySelectorAll('.answer-option');
            
            answerOptions.forEach((option, index) => {
                option.classList.add('disabled');
                option.onclick = null;
                
                if (index === question.correctAnswer) {
                    option.classList.add('correct');
                } else if (index === selectedIndex && selectedIndex !== question.correctAnswer) {
                    option.classList.add('incorrect');
                }
            });
        }

        // Next question
        function nextQuestion() {
            gameState.currentQuestion++;
            
            if (gameState.currentQuestion >= gameState.questions.length) {
                // Game finished
                endGame();
            } else {
                // Show interstitial ad for FREE users (every 2 questions)
                if (currentUser.accountType === 'FREE' && gameState.currentQuestion % 2 === 0) {
                    showInterstitialAd(() => {
                        showQuestion();
                    });
                } else {
                    showQuestion();
                }
            }
        }

        // Show interstitial ad
        function showInterstitialAd(callback) {
            const interstitial = document.getElementById('interstitialAd');
            const countdown = document.getElementById('interstitialCountdown');
            
            interstitial.classList.add('show');
            
            let timeLeft = 3;
            const countdownInterval = setInterval(() => {
                countdown.textContent = `Advertisement - ${timeLeft} seconds remaining`;
                timeLeft--;
                
                if (timeLeft < 0) {
                    clearInterval(countdownInterval);
                    interstitial.classList.remove('show');
                    callback();
                }
            }, 1000);
        }

        // Update score display
        function updateScoreDisplay() {
            document.getElementById('scoreDisplay').textContent = `Score: ${gameState.score}`;
        }

        // End game
        function endGame() {
            // Show final interstitial for FREE users
            if (currentUser.accountType === 'FREE') {
                showInterstitialAd(() => {
                    showResults();
                });
            } else {
                showResults();
            }
        }

        // Show results
        function showResults() {
            const accuracy = Math.round((gameState.correctAnswers / gameState.questions.length) * 100);
            const avgTime = Math.round(gameState.responseTimes.reduce((a, b) => a + b, 0) / gameState.responseTimes.length / 1000);
            
            // Update results display
            document.getElementById('finalScore').textContent = gameState.score;
            document.getElementById('correctAnswers').textContent = gameState.correctAnswers;
            document.getElementById('accuracy').textContent = `${accuracy}%`;
            document.getElementById('avgTime').textContent = `${avgTime}s`;
            document.getElementById('rank').textContent = '#1'; // Mock rank
            
            // Show results screen
            document.getElementById('resultsScreen').classList.add('show');
            
            // TODO: Send results to server
            // saveGameResults();
        }

        // Save game results (to be implemented)
        async function saveGameResults() {
            try {
                const token = localStorage.getItem('brainbrawler_token');
                const response = await fetch(`${API_BASE}/api/game/results`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        gameId: gameState.gameId,
                        score: gameState.score,
                        correctAnswers: gameState.correctAnswers,
                        totalAnswers: gameState.questions.length,
                        responseTimes: gameState.responseTimes
                    })
                });
                
                if (response.ok) {
                    console.log('Game results saved');
                }
            } catch (error) {
                console.error('Error saving results:', error);
            }
        }

        // Game event handlers
        function handleNewQuestion(data) {
            const { question, questionNumber, timeLimit } = data;
            
            gameState.currentQuestion = questionNumber - 1;
            gameState.selectedAnswer = null;
            
            // Update UI
            updateGameHeader();
            showQuestion(question, timeLimit);
            startQuestionTimer(timeLimit);
        }

        function handleQuestionResults(data) {
            const { correctAnswer, scores, playerAnswers } = data;
            
            // Show correct answer
            showCorrectAnswer(correctAnswer);
            
            // Update scores
            updateScores(scores);
            
            // Show player answers
            showPlayerAnswers(playerAnswers);
            
            // Wait before next question
            setTimeout(() => {
                hideQuestionResults();
            }, 3000);
        }

        function handleGameEnd(data) {
            const { finalScores, leaderboard, gameStats } = data;
            
            // Stop any timers
            clearAllTimers();
            
            // Show final results
            showGameResults(leaderboard, gameStats);
        }

        function updatePlayerStatus(data) {
            const { playerId, hasAnswered } = data;
            // Update UI to show which players have answered
            console.log(`👤 Player ${playerId} answered: ${hasAnswered}`);
            // TODO: Implement player indicator UI when needed
        }

        function showError(message) {
            console.error('🚨 Game Error:', message);
            alert('Game Error: ' + message);
        }

        // Question display functions
        function showQuestion(question, timeLimit) {
            const container = document.querySelector('.question-container');
            
            container.innerHTML = `
                <div class="question-number">
                    Question ${gameState.currentQuestion + 1} of ${gameState.totalQuestions}
                </div>
                <div class="question-text">${question.text}</div>
                <div class="answers-grid">
                    ${question.options.map((option, index) => `
                        <button class="answer-option" onclick="selectAnswer(${index})">
                            <span class="option-letter">${String.fromCharCode(65 + index)}</span>
                            <span class="option-text">${option}</span>
                        </button>
                    `).join('')}
                </div>
                <div class="question-info">
                    <div class="timer-display">
                        <span id="questionTimer">${timeLimit}</span>s
                    </div>
                </div>
            `;
        }

        function showWaitingMessage() {
            const container = document.querySelector('.question-container');
            
            container.innerHTML = `
                <div class="waiting-message">
                    <div class="waiting-spinner"></div>
                    <h2>🎮 Game Starting Soon!</h2>
                    <p>Waiting for questions to be loaded...</p>
                    <div class="room-info">
                        <strong>Room:</strong> ${gameState.roomCode || gameState.roomId}<br>
                        <strong>Questions:</strong> ${gameState.totalQuestions}<br>
                        <strong>Time per question:</strong> ${gameState.questionTime}s
                    </div>
                </div>
            `;
        }

        function selectAnswer(answerIndex) {
            if (gameState.selectedAnswer !== null) return; // Already answered
            
            gameState.selectedAnswer = answerIndex;
            
            // Visual feedback
            const options = document.querySelectorAll('.answer-option');
            options.forEach((option, index) => {
                if (index === answerIndex) {
                    option.classList.add('selected');
                } else {
                    option.classList.add('disabled');
                }
            });
            
            // Send answer to GameEngine via Socket.io
            if (gameState.socket && gameState.connected) {
                gameState.socket.emit('submit-answer', {
                    roomCode: gameState.roomCode,
                    questionIndex: gameState.currentQuestion,
                    answer: answerIndex,
                    timestamp: gameState.questionStartTime // Send start time for response calculation
                });
                
                console.log(`Answer sent to GameEngine: ${answerIndex} for question ${gameState.currentQuestion}`);
            } else {
                console.warn('Socket not connected, cannot send answer');
            }
            
            console.log(`Answer selected: ${answerIndex}`);
        }

        function showCorrectAnswer(correctAnswerIndex) {
            const options = document.querySelectorAll('.answer-option');
            options.forEach((option, index) => {
                if (index === correctAnswerIndex) {
                    option.classList.add('correct');
                } else if (index === gameState.selectedAnswer && index !== correctAnswerIndex) {
                    option.classList.add('incorrect');
                }
                option.classList.add('disabled');
            });
        }

        function handleQuestionResults(data) {
            console.log('Question results received:', data);
            
            // Show correct answer
            if (data.correctAnswer !== undefined) {
                showCorrectAnswer(data.correctAnswer);
            }
            
            // Update scores
            if (data.scores) {
                updateScores(data.scores);
            }
            
            // Show result message for this question
            setTimeout(() => {
                if (data.isLastQuestion) {
                    showWaitingMessage('Game finished! Calculating final results...');
                } else {
                    showWaitingMessage('Next question coming soon...');
                }
            }, 3000);
        }

        function handleGameEnd(data) {
            console.log('Game ended:', data);
            
            // Hide game interface
            document.getElementById('questionContainer').style.display = 'none';
            
            // Show final results
            showGameResults(data);
        }

        function showGameResults(data) {
            // Create a simple results display
            const resultsHTML = `
                <div style="text-align: center; padding: 20px;">
                    <h2>🎉 Game Finished!</h2>
                    <div style="margin: 20px 0;">
                        <h3>Your Score: ${gameState.score || 0}</h3>
                    </div>
                    ${data.leaderboard ? `
                        <div style="margin: 20px 0;">
                            <h4>Leaderboard:</h4>
                            ${data.leaderboard.map((player, index) => 
                                `<div>${index + 1}. ${player.username}: ${player.score} points</div>`
                            ).join('')}
                        </div>
                    ` : ''}
                    <button onclick="window.location.href='lobby.html'" style="padding: 10px 20px; font-size: 16px; margin-top: 20px;">
                        Back to Lobby
                    </button>
                </div>
            `;
            
            document.body.innerHTML = resultsHTML;
        }

        function updateScores(scores) {
            // Update player's score
            if (scores[currentUser.id]) {
                gameState.score = scores[currentUser.id];
                const scoreDisplay = document.querySelector('.score-display');
                if (scoreDisplay) {
                    scoreDisplay.textContent = `Score: ${gameState.score}`;
                }
            }
        }

        function updateGameHeader() {
            document.querySelector('.question-counter').textContent = 
                `Question ${gameState.currentQuestion + 1}/${gameState.totalQuestions}`;
            document.querySelector('.score-display').textContent = `Score: ${gameState.score}`;
        }

        // Timer functions
        let questionTimerInterval;

        function startQuestionTimer(timeLimit) {
            let timeLeft = timeLimit;
            const timerElement = document.getElementById('questionTimer');
            const headerTimer = document.querySelector('.timer');
            
            clearInterval(questionTimerInterval);
            
            questionTimerInterval = setInterval(() => {
                timeLeft--;
                
                if (timerElement) timerElement.textContent = timeLeft;
                if (headerTimer) headerTimer.textContent = timeLeft;
                
                // Add warning class when time is low
                if (timeLeft <= 5) {
                    headerTimer?.classList.add('warning');
                }
                
                if (timeLeft <= 0) {
                    clearInterval(questionTimerInterval);
                    // Auto-submit if no answer selected
                    if (gameState.selectedAnswer === null) {
                        selectAnswer(-1); // -1 indicates no answer
                    }
                }
            }, 1000);
        }

        function clearAllTimers() {
            if (questionTimerInterval) {
                clearInterval(questionTimerInterval);
            }
        }
    </script>
</body>
</html> 